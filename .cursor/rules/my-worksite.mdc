
使用 antdesign 快速构建页面

项目目录：
  ├── cypress                 # 基于cypress的e2e测试
  │   ├── e2e                 # 测试用例
  │   ├── tsconfig.json       # cypress的tsconfig
  │   └── core                # 核心功能模块，可能包括基础设施、工具类等。
  ├── docker                  # 项目docker容器构建脚本（注：这是打包代码，请勿在正式代码中直接引用）
  │   ├── base                # 构建底座镜像
  │   ├── builder             # 构建编译镜像
  │   └── my-worksite         # 构建应用镜像
  ├── interceptors            # nextjs拦截器层
  │   └── userInterceptor.ts  # 用户鉴权拦截器
  ├── pages                   # nextjs应用路由层
  │   ├── api                 # 该目录下均为应用接口实现，userInterceptor会自动对其鉴权
  │   │   ├── app             # 该目录下的api将会映射到/app路径，目前仅作预留，实际没有使用
  │   │   └── web             # 该目录下均api将会映射到/api路径，浏览器端要使用的api均在此实现
  │   ├── login               # 该目录下为登录页面及接口实现，不鉴权
  │   └── index.tsx           # spa入口
  ├── public                  # 静态web资源
  ├── pyscripts               # 容器的后台脚本，目前没有使用，请勿修改
  ├── src                     # 主代码目录
  │   ├── business            # spa页面文件位置
  │   ├── components          # spa页面通用组件
  │   ├── config              # 前后端公用的配置
  │   ├── fetch               # 网络请求组件，基于axios实现，前后端都要使用该组件
  │   ├── framework           # 页面主要的框架性组件
  │   ├── init                # spa启动前需要做的事情
  │   ├── router              # spa应用解析url的组件，基于react-router实现
  │   ├── services            # nextjs应用后端访问mysql的组件
  │   ├── store               # spa应用缓存，基于redux实现
  │   ├── types               # 类型声明
  │   └── utils               # 工具类，前后端通用
  ├── styles                  # 样式目录
  ├── test                    # 单元测试
  ├── launch.sh               # 用于在镜像中启动应用的脚本
  ├── middleware.ts           # nextjs应用中间件配置文件
  ├── next.config.json        # nextjs应用配置文件
  ├── package.json            # 工程描述文件
  ├── README.md               # git描述文件
  ├── tsconfig.json           # ts配置文件
  └── yarn.lock               # 使用yarn构建




